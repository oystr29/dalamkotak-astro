---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseHead from "~/components/BaseHead.astro";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { Icon } from "astro-icon/components";
import ChordLayout from "../../layouts/ChordLayout.astro";
import ChordSidebar from "~/components/ChordSidebar.astro";
import "dayjs/locale/id";

dayjs.extend(relativeTime);

export async function getStaticPaths() {
  const chords = await getCollection("chord");
  return chords.map((chord) => ({
    params: { slug: chord.slug },
    props: chord,
  }));
}
type Props = CollectionEntry<"chord">;

const chord = Astro.props;
const globs = await Astro.glob<Props["data"]>(`../../content/chord/*.md`);
const chord_md = globs.filter(
  (glob) =>
    `${glob.frontmatter.title}-${glob.frontmatter.artist}` ===
    `${chord.data.title}-${chord.data.artist}`,
)[0];
console.log(chord_md.rawContent());

const data: Record<string, { bar: string; time: string }[]> = {};
let rec_data = "";
chord_md
  .rawContent()
  .split("\n")
  .filter((v) => v !== "")
  .forEach((v) => {
    if (/\[(.*?)\]/.test(v)) {
      data[v] = [];
      rec_data = v;
      return;
    }
    const [bar, time] = v.split(",");
    data[rec_data].push({ bar, time });
  });
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`${chord.data.title} - ${chord.data.artist}`}
      description={"Kunci Gitar"}
      transition={false}
    />
  </head>
  <body
    class="bg-gray-950 text-white md:p-2 flex flex-col flex-1 h-screen overflow-y-hidden"
  >
    <main class="flex gap-4 flex-1">
      <ChordSidebar />
      <section
        class="flex items-center flex-col basis-4/5 flex-1 text-white bg-red-950 p-4 md:rounded-lg"
      >
        <div
          id="chord-container"
          class="h-screen overflow-y-auto pr-6 text-sm md:text-lg xl:text-4xl font-bold scrollbar-thin scrollbar-track-red-950 scrollbar-thumb-red-950 pb-64 scroll-smooth"
        >
          {
            Object.keys(data).map((key, i) => {
              const next =
                i + 1 === Object.keys(data).length
                  ? undefined
                  : data[Object.keys(data)[i + 1]];
              return (
                <>
                  <div class="text-white/10">{key.replaceAll(".", "")}</div>
                  <div class="mb-4">
                    {(data[key] as { bar: string; time: string }[]).map(
                      (v, ii) => {
                        const to =
                          ii + 1 !== data[key].length
                            ? data[key][ii + 1].time
                            : next?.[0].time ?? "";
                        const [minFrom, secFrom] = v.time
                          .split(":")
                          .map((a) => Number(a));

                        const [minTo, secTo] = to
                          .split(":")
                          .map((a) => Number(a));
                        return (
                          <div
                            data-from={minFrom * 60 + secFrom}
                            data-to={
                              isNaN(minTo * 60 + secTo)
                                ? ""
                                : minTo * 60 + secTo
                            }
                            class="text-white/10 mb-1 bar scroll-mt-8 cursor-pointer hover:text-white/40"
                            style="color: rgb(255 255 255 / 0.1);"
                          >
                            {v.bar}
                          </div>
                        );
                      },
                    )}
                  </div>
                </>
              );
            })
          }
        </div>
      </section>
      <div
        class="fixed bottom-0 left-0 z-50 w-full flex-1 items-center gap-3 rounded-lg rounded-b-none bg-red-950 md:bg-slate-950 p-2 px-6"
      >
        <div>
          <input
            type="range"
            value="0"
            class="media-range block md:hidden w-full text-gray-700 bg-gray-400 accent-red-500 border border-gray-800 rounded-md focus:border-blue-950 focus:outline-none focus:ring"
          />
          <div class="flex justify-between items-center">
            <p id="" class="curr-time md:hidden block"></p>
            <p id="" class="total-time md:hidden block"></p>
          </div>
        </div>

        <div class="flex items-center justify-between flex-1">
          <div class="flex items-center gap-6 text-lg">
            <iframe
              id="player"
              width="100"
              height="100"
              src={`https://www.youtube.com/embed/${chord.data.ytID}?enablejsapi=1&autoplay=1`}
              frameborder="0"
              style="border: solid 4px #37474F"></iframe>
            <div class="hidden md:block">
              <p class="font-bold">{chord.data.title}</p>
              <p>{chord.data.artist}</p>
            </div>
          </div>
          <div class="flex md:flex-col flex-col-reverse items-center gap-4">
            <div class="flex items-center gap-4">
              <Icon
                id="rewind10"
                name="mdi:rewind-10"
                class="w-8 h-8 hover:scale-110 transition"
              />

              <button id="mediabtn" type="button">
                <Icon
                  id="play"
                  name="mdi:play"
                  class="w-8 h-8 hover:scale-110 transition"
                />
                <Icon
                  id="pause"
                  name="mdi:pause"
                  class="w-8 h-8 hover:scale-110 transition hidden"
                />
                <Icon
                  id="buffer"
                  name="mdi:progress-helper"
                  class="w-8 h-8 hover:scale-110 transition hidden"
                />
              </button>
              <Icon
                id="fw10"
                name="mdi:fast-forward-10"
                class="w-8 h-8 hover:scale-110 transition"
              />
            </div>
            <div class="hidden md:flex items-center gap-4">
              <p class="curr-time hidden md:block"></p>
              <input
                type="range"
                value="0"
                class="media-range md:block hidden w-[300px] text-gray-700 bg-white border border-gray-300 rounded-md focus:border-blue-500 focus:outline-none focus:ring"
              />
              <p class="total-time hidden md:block"></p>
            </div>
          </div>
          <Icon name="mdi:heart-outline" class="h-8 w-8" />
          <div class="hidden"></div>
        </div>
      </div>
      <script type="text/javascript" is:inline>
        const chordContainer = document.querySelector("#chord-container");
        const mediaRanges = Array.from(
          document.querySelectorAll(".media-range"),
        );
        const currTimes = Array.from(document.querySelectorAll(".curr-time"));
        const totalTimes = Array.from(document.querySelectorAll(".total-time"));

        function scrollTo(element, to, duration) {
          var start = element.scrollTop,
            change = to - start,
            currentTime = 0,
            increment = 20;

          var animateScroll = function () {
            currentTime += increment;
            var val = Math.easeInOutQuad(currentTime, start, change, duration);
            element.scrollTop = val;
            if (currentTime < duration) {
              setTimeout(animateScroll, increment);
            }
          };
          animateScroll();
        }

        //t = current time
        //b = start value
        //c = change in value
        //d = duration
        Math.easeInOutQuad = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) return (c / 2) * t * t + b;
          t--;
          return (-c / 2) * (t * (t - 2) - 1) + b;
        };
        var tag = document.createElement("script");
        tag.id = "iframe-demo";
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        const playBtn = document.querySelector("#play");
        const pauseBtn = document.querySelector("#pause");
        let btnMedia = {
          pause: () => {
            if (playBtn.classList.contains("hidden"))
              playBtn.classList.remove("hidden");
            if (!pauseBtn.classList.contains("hidden"))
              pauseBtn.classList.add("hidden");
          },
          play: () => {
            if (!playBtn.classList.contains("hidden"))
              playBtn.classList.add("hidden");
            if (pauseBtn.classList.contains("hidden"))
              pauseBtn.classList.remove("hidden");
          },
        };

        const barEls = document.querySelectorAll(".bar");
        const timeFrom = Array.from(barEls).map(
          (el) => Number(el.getAttribute("data-from")) ?? 0,
        );
        let prev_time = -1;
        let currIndex = -1;

        var player;
        let index = 0;
        const getCurrentHightlightIndex = (start) => {
          const currTime = parseInt(player.getCurrentTime());
          for (let i = start; i < timeFrom.length; i++) {
            const time = timeFrom[i];

            if (i === timeFrom.length - 1 && currTime < time) {
              index = -1;
              break;
            }

            if (i === timeFrom.length - 1 && currTime > time) {
              index = i;
              break;
            }

            if (time <= currTime && timeFrom[i + 1] >= currTime) {
              index = i;
              break;
            }

            index = i;
          }
        };
        const intervalFunc = () => {
          if (player) {
            const currTime = parseInt(player.getCurrentTime());
            const minutes = Math.floor(currTime / 60);
            const second = currTime - minutes * 60;
            const curr_time_dom = `${minutes}:${second.toString().length === 1 ? `0${second}` : second}`;
            currTimes.forEach(
              (currTime) => (currTime.innerHTML = curr_time_dom),
            );
            mediaRanges.forEach(
              (mediaRange) =>
                (mediaRange.value = `${(parseInt(player.getCurrentTime()) / player.getDuration()) * 100}`),
            );

            getCurrentHightlightIndex(index);

            const hightlightEl = document.querySelector(
              `[data-from='${timeFrom[index]}']`,
            );

            if (player.getPlayerState() == 1 && hightlightEl && index >= 0) {
              if (prev_time != -1) {
                document.querySelector(
                  `[data-from='${prev_time}']`,
                ).style.color = "rgb(255 255 255 / 0.1)";
              }
              prev_time = timeFrom[index];
              hightlightEl.style.color = "rgb(255 255 255)";

              scrollTo(chordContainer, hightlightEl.offsetTop - 60, 100);
            }
          }
        };
        let interval;

        function onYouTubeIframeAPIReady() {
          player = new YT.Player("player", {
            playerVars: {
              autoplay: 1,
              loop: 1,
              mute: 1, // N.B. here the mute settings.
              playsinline: 1,
            },
            events: {
              onReady: (event) => {
                const duration = event.target.getDuration();
                const minutes = Math.floor(duration / 60);
                const second = duration - minutes * 60;

                document.getElementById("player").style.borderColor = "#FF6D00";
                currTimes.forEach((currTime) => (currTime.innerHTML = "0:00"));
                totalTimes.forEach(
                  (totalTimes) =>
                    (totalTimes.innerHTML = `${minutes}:${second}`),
                );
              },
              onStateChange: (event) => {
                const playerStatus = event.data;
                let color;
                let status;
                if (playerStatus == -1) {
                  color = "#37474F"; // unstarted = gray
                  status = "unstarted";
                  btnMedia.pause();
                } else if (playerStatus == 0) {
                  color = "#FFFF00"; // ended = yellow
                  if (interval) clearInterval(interval);
                  mediaRanges.forEach((v) => (v.value = 0));
                  btnMedia.pause();
                  currTimes.forEach((v) => (v.innerHTML = `0:00`));
                  status = "ended";
                } else if (playerStatus == 1) {
                  color = "#33691E"; // playing = green
                  interval = setInterval(intervalFunc, 1000);
                  btnMedia.play();
                  status = "playing";
                } else if (playerStatus == 2) {
                  color = "#DD2C00"; // paused = red
                  if (interval) clearInterval(interval);
                  btnMedia.pause();
                  status = "paused";
                } else if (playerStatus == 3) {
                  color = "#AA00FF"; // buffering = purple
                  status = "buffering";
                } else if (playerStatus == 5) {
                  color = "#FF6DOO"; // video cued = orange
                  status = "cued";
                }
                if (color) {
                  document.getElementById("player").style.borderColor = color;
                }
              },
            },
          });
        }

        // outside track run correctly
        function mediaBtnClick() {
          const state = player.getPlayerState();
          if (state == 1) {
            btnMedia.pause();
            player.pauseVideo();
          } else if (state == 0 || state == 2 || state == 5 || state == -1) {
            btnMedia.play();
            player.playVideo();
          }
        }

        document
          .querySelector("#mediabtn")
          .addEventListener("click", mediaBtnClick);

        function rewind10() {
          const time = player.getCurrentTime();
          const seek = Number(time) - 10;
          if (seek < 0) {
            player.seekTo(0);
            return;
          }
          player.seekTo(seek);
          getCurrentHightlightIndex(0);
        }

        document
          .querySelector("#rewind10")
          .addEventListener("click", () => rewind10);

        function fw10() {
          const time = player.getCurrentTime();
          const seek = Number(time) + 10;
          player.seekTo();
          if (seek > Number(player.getDuration())) {
            player.seekTo(player.getDuration());
            return;
          }

          player.seekTo(seek);
          getCurrentHightlightIndex(0);
        }
        document.querySelector("#fw10").addEventListener("click", fw10);
        // persent = current/duration * 100
        // persent *100/duration = current

        mediaRanges.forEach((mediaRange) =>
          mediaRange.addEventListener("change", (event) => {
            const percent = Number(event.target.value);
            mediaRange.value = percent;
            const clickTime = (percent * Number(player.getDuration())) / 100;
            player.seekTo(clickTime);
            getCurrentHightlightIndex(0);
          }),
        );

        document.addEventListener("keyup", (e) => {
          if (e.code === "Space") {
            mediaBtnClick();
            return;
          }

          if (e.code === "ArrowLeft") {
            rewind10();
            return;
          }

          if (e.code === "ArrowRight") {
            fw10();
            return;
          }
        });

        Array.from(document.querySelectorAll(".bar")).map((el) =>
          el.addEventListener("click", (e) => {
            player.playVideo();
            player.seekTo(Number(e.target.getAttribute("data-from")) + 1);
            getCurrentHightlightIndex(0);
          }),
        );
      </script>
    </main>
  </body>
</html>
